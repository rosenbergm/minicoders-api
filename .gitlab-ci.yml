stages:
  - test
  - build & deploy staging
  - build & deploy production

run tests:
  stage: test
  script:
    - whoami
    - "docker build -f Dockerfile.staging -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-staging ."
    - "docker run ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-staging npm run coverage"

deploy to staging:
  environment: staging
  stage: build & deploy staging
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "${SERVER_HOSTNAME}" >> ~/.ssh/known_hosts
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker build -f Dockerfile.staging -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-staging ."
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-staging"
    - ssh ${SERVER_USER}@${SERVER_HOSTNAME} "docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-staging"
    - ssh ${SERVER_USER}@${SERVER_HOSTNAME} "docker stop websense-api"
    - ssh ${SERVER_USER}@${SERVER_HOSTNAME} "docker rm websense-api"
    - ssh ${SERVER_USER}@${SERVER_HOSTNAME} "docker run --network=websense-api_mybridge -e 'NODE_ENV=staging' --restart always --name websense-api -d -p 7300:7300 ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest-staging node build/index.js"
  after_script:
    - "docker logout ${CI_REGISTRY}"
  only:
    - master

deploy to production:
  environment: production
  stage: build & deploy production
  when: manual
  script: date
  only:
    - master
